// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  Token           Token[]
  Product         Product[]
  Post            Post[]
  Answer          Answer[]
  Wondering       Wondering[]
  writenReviews   Review[]    @relation(name: "writenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  Fav             Fav[]
  Sale            Sale[]
  Purchase        Purchase[]
  Reocord         Reocord[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Stream          Stream[]
  Message         Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  Fav         Fav[]
  Sale        Sale[]
  Purchase    Purchase[]
  Reocord     Reocord[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, productId])
}

model Post {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  longitude Float?
  latitude  Float?
  Answer    Answer[]
  Wondering Wondering[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model Answer {
  id Int @id @default(autoincrement())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, userId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, userId])
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writenReviews", fields: [createdId], references: [id], onDelete: Cascade)
  createdId    Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reocord {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      kind
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Message     Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
